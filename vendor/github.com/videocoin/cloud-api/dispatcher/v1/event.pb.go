// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dispatcher/v1/event.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventType int32

const (
	EventTypeUnknown      EventType = 0
	EventTypeCreate       EventType = 1
	EventTypeUpdate       EventType = 2
	EventTypeDelete       EventType = 3
	EventTypeUpdateStatus EventType = 4
)

var EventType_name = map[int32]string{
	0: "EVENT_TYPE_UNKNOWN",
	1: "EVENT_TYPE_CREATE",
	2: "EVENT_TYPE_UPDATE",
	3: "EVENT_TYPE_DELETE",
	4: "EVENT_TYPE_UPDATE_STATUS",
}

var EventType_value = map[string]int32{
	"EVENT_TYPE_UNKNOWN":       0,
	"EVENT_TYPE_CREATE":        1,
	"EVENT_TYPE_UPDATE":        2,
	"EVENT_TYPE_DELETE":        3,
	"EVENT_TYPE_UPDATE_STATUS": 4,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}

func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dadd60d0273236e0, []int{0}
}

type Event struct {
	Type                 EventType  `protobuf:"varint,1,opt,name=type,proto3,enum=cloud.api.dispatcher.v1.EventType" json:"type,omitempty"`
	TaskID               string     `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status               TaskStatus `protobuf:"varint,3,opt,name=status,proto3,enum=cloud.api.dispatcher.v1.TaskStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_dadd60d0273236e0, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventTypeUnknown
}

func (m *Event) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *Event) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatusCreated
}

func (*Event) XXX_MessageName() string {
	return "cloud.api.dispatcher.v1.Event"
}
func init() {
	proto.RegisterEnum("cloud.api.dispatcher.v1.EventType", EventType_name, EventType_value)
	golang_proto.RegisterEnum("cloud.api.dispatcher.v1.EventType", EventType_name, EventType_value)
	proto.RegisterType((*Event)(nil), "cloud.api.dispatcher.v1.Event")
	golang_proto.RegisterType((*Event)(nil), "cloud.api.dispatcher.v1.Event")
}

func init() { proto.RegisterFile("dispatcher/v1/event.proto", fileDescriptor_dadd60d0273236e0) }
func init() { golang_proto.RegisterFile("dispatcher/v1/event.proto", fileDescriptor_dadd60d0273236e0) }

var fileDescriptor_dadd60d0273236e0 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4c, 0xc9, 0x2c, 0x2e,
	0x48, 0x2c, 0x49, 0xce, 0x48, 0x2d, 0xd2, 0x2f, 0x33, 0xd4, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4f, 0xce, 0xc9, 0x2f, 0x4d, 0xd1, 0x4b, 0x2c, 0xc8,
	0xd4, 0x43, 0x28, 0xd2, 0x2b, 0x33, 0x94, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f,
	0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0x68,
	0x93, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f,
	0xcf, 0xd7, 0x07, 0x0b, 0x27, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0x55, 0x2e, 0x81,
	0xea, 0x80, 0x92, 0xc4, 0xe2, 0x6c, 0x88, 0x8c, 0xd2, 0x42, 0x46, 0x2e, 0x56, 0x57, 0x90, 0x7b,
	0x84, 0xcc, 0xb8, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x94,
	0xf4, 0x70, 0x38, 0x4c, 0x0f, 0xac, 0x3a, 0xa4, 0xb2, 0x20, 0x35, 0x08, 0xac, 0x5e, 0x48, 0x99,
	0x8b, 0x1d, 0x64, 0x5e, 0x7c, 0x66, 0x8a, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xa7, 0x13, 0xd7, 0xa3,
	0x7b, 0xf2, 0x6c, 0x21, 0x89, 0xc5, 0xd9, 0x9e, 0x2e, 0x41, 0x6c, 0x20, 0x29, 0xcf, 0x14, 0x21,
	0x6b, 0x2e, 0xb6, 0xe2, 0x92, 0xc4, 0x92, 0xd2, 0x62, 0x09, 0x66, 0xb0, 0xf1, 0xca, 0x38, 0x8d,
	0x07, 0x69, 0x0c, 0x06, 0x2b, 0x0d, 0x82, 0x6a, 0xd1, 0xea, 0x64, 0xe2, 0xe2, 0x84, 0xdb, 0x2a,
	0xa4, 0xc3, 0x25, 0xe4, 0x1a, 0xe6, 0xea, 0x17, 0x12, 0x1f, 0x12, 0x19, 0xe0, 0x1a, 0x1f, 0xea,
	0xe7, 0xed, 0xe7, 0x1f, 0xee, 0x27, 0xc0, 0x20, 0x25, 0xd2, 0x35, 0x57, 0x41, 0x00, 0xae, 0x2c,
	0x34, 0x2f, 0x3b, 0x2f, 0xbf, 0x3c, 0x4f, 0x48, 0x8b, 0x4b, 0x10, 0x49, 0xb5, 0x73, 0x90, 0xab,
	0x63, 0x88, 0xab, 0x00, 0xa3, 0x94, 0x70, 0xd7, 0x5c, 0x05, 0x7e, 0xb8, 0x62, 0xe7, 0xa2, 0xd4,
	0xc4, 0x92, 0x54, 0x34, 0xb5, 0xa1, 0x01, 0x2e, 0x20, 0xb5, 0x4c, 0x68, 0x6a, 0x43, 0x0b, 0x52,
	0x30, 0xd5, 0xba, 0xb8, 0xfa, 0xb8, 0x86, 0xb8, 0x0a, 0x30, 0xa3, 0xa9, 0x75, 0x49, 0xcd, 0x49,
	0x2d, 0x49, 0x15, 0x32, 0xe7, 0x92, 0xc0, 0x30, 0x37, 0x3e, 0x38, 0xc4, 0x31, 0x24, 0x34, 0x58,
	0x80, 0x45, 0x4a, 0xb2, 0x6b, 0xae, 0x82, 0x28, 0x9a, 0xf1, 0x90, 0x00, 0x90, 0x12, 0xec, 0x58,
	0x2c, 0xc7, 0xb0, 0x6b, 0x89, 0x1c, 0xc2, 0xf7, 0x4e, 0x12, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78,
	0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x81, 0xc7, 0x72, 0x8c, 0x27, 0x1e, 0xcb, 0x31, 0x46,
	0x31, 0x95, 0x19, 0x26, 0xb1, 0x81, 0x23, 0xd4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x44,
	0xa0, 0x8b, 0x6d, 0x02, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TaskID) > 0 {
		i -= len(m.TaskID)
		copy(dAtA[i:], m.TaskID)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.TaskID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEvent(uint64(m.Type))
	}
	l = len(m.TaskID)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEvent(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
