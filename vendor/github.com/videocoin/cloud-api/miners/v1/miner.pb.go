// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: miners/v1/miner.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MinerStatus int32

const (
	MinerStatusOffline MinerStatus = 0
	MinerStatusIdle    MinerStatus = 1
	MinerStatusBusy    MinerStatus = 2
)

var MinerStatus_name = map[int32]string{
	0: "MINER_STATUS_OFFLINE",
	1: "MINER_STATUS_IDLE",
	2: "MINER_STATUS_BUSY",
}

var MinerStatus_value = map[string]int32{
	"MINER_STATUS_OFFLINE": 0,
	"MINER_STATUS_IDLE":    1,
	"MINER_STATUS_BUSY":    2,
}

func (x MinerStatus) String() string {
	return proto.EnumName(MinerStatus_name, int32(x))
}

func (MinerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a7d99a35436329cc, []int{0}
}

type Miner struct {
	Id                   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" gorm:"type:varchar(36);primary_key"`
	UserId               string      `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" gorm:"type:varchar(36);"`
	Hash                 string      `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Status               MinerStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cloud.api.miners.v1.MinerStatus" json:"status,omitempty"`
	CpuIdle              int64       `protobuf:"varint,5,opt,name=cpu_idle,json=cpuIdle,proto3" json:"cpu_idle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Miner) Reset()         { *m = Miner{} }
func (m *Miner) String() string { return proto.CompactTextString(m) }
func (*Miner) ProtoMessage()    {}
func (*Miner) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7d99a35436329cc, []int{0}
}
func (m *Miner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Miner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Miner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Miner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Miner.Merge(m, src)
}
func (m *Miner) XXX_Size() int {
	return m.Size()
}
func (m *Miner) XXX_DiscardUnknown() {
	xxx_messageInfo_Miner.DiscardUnknown(m)
}

var xxx_messageInfo_Miner proto.InternalMessageInfo

func (m *Miner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Miner) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Miner) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Miner) GetStatus() MinerStatus {
	if m != nil {
		return m.Status
	}
	return MinerStatusOffline
}

func (m *Miner) GetCpuIdle() int64 {
	if m != nil {
		return m.CpuIdle
	}
	return 0
}

func (*Miner) XXX_MessageName() string {
	return "cloud.api.miners.v1.Miner"
}
func init() {
	proto.RegisterEnum("cloud.api.miners.v1.MinerStatus", MinerStatus_name, MinerStatus_value)
	golang_proto.RegisterEnum("cloud.api.miners.v1.MinerStatus", MinerStatus_name, MinerStatus_value)
	proto.RegisterType((*Miner)(nil), "cloud.api.miners.v1.Miner")
	golang_proto.RegisterType((*Miner)(nil), "cloud.api.miners.v1.Miner")
}

func init() { proto.RegisterFile("miners/v1/miner.proto", fileDescriptor_a7d99a35436329cc) }
func init() { golang_proto.RegisterFile("miners/v1/miner.proto", fileDescriptor_a7d99a35436329cc) }

var fileDescriptor_a7d99a35436329cc = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0xcd, 0xcc, 0x4b,
	0x2d, 0x2a, 0xd6, 0x2f, 0x33, 0xd4, 0x07, 0xb3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84,
	0x93, 0x73, 0xf2, 0x4b, 0x53, 0xf4, 0x12, 0x0b, 0x32, 0xf5, 0x20, 0x0a, 0xf4, 0xca, 0x0c, 0xa5,
	0x74, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3,
	0xf5, 0xc1, 0x6a, 0x93, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x07, 0xcc, 0x82, 0x98, 0xa1, 0xf4, 0x80,
	0x91, 0x8b, 0xd5, 0x17, 0xa4, 0x59, 0xc8, 0x9c, 0x8b, 0x29, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51,
	0x83, 0xd3, 0x49, 0xfd, 0xd3, 0x3d, 0x79, 0xe5, 0xf4, 0xfc, 0xa2, 0x5c, 0x2b, 0xa5, 0x92, 0xca,
	0x82, 0x54, 0xab, 0xb2, 0xc4, 0xa2, 0xe4, 0x8c, 0xc4, 0x22, 0x0d, 0x63, 0x33, 0x4d, 0xeb, 0x82,
	0xa2, 0xcc, 0xdc, 0xc4, 0xa2, 0xca, 0xf8, 0xec, 0xd4, 0x4a, 0xa5, 0x20, 0xa6, 0xcc, 0x14, 0x21,
	0x53, 0x2e, 0xf6, 0xd2, 0xe2, 0xd4, 0xa2, 0xf8, 0xcc, 0x14, 0x09, 0x26, 0xb0, 0x6e, 0x99, 0x4f,
	0xf7, 0xe4, 0x25, 0x70, 0xe8, 0x56, 0x0a, 0x62, 0x03, 0x29, 0xf6, 0x4c, 0x11, 0x12, 0xe2, 0x62,
	0xc9, 0x48, 0x2c, 0xce, 0x90, 0x60, 0x06, 0xe9, 0x09, 0x02, 0xb3, 0x85, 0x2c, 0xb8, 0xd8, 0x8a,
	0x4b, 0x12, 0x4b, 0x4a, 0x8b, 0x25, 0x58, 0x14, 0x18, 0x35, 0xf8, 0x8c, 0x14, 0xf4, 0xb0, 0x78,
	0x51, 0x0f, 0xec, 0xde, 0x60, 0xb0, 0xba, 0x20, 0xa8, 0x7a, 0x21, 0x49, 0x2e, 0x8e, 0xe4, 0x82,
	0xd2, 0xf8, 0xcc, 0x94, 0x9c, 0x54, 0x09, 0x56, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0xf6, 0xe4, 0x82,
	0x52, 0xcf, 0x94, 0x9c, 0x54, 0xad, 0x35, 0x8c, 0x5c, 0xdc, 0x48, 0x5a, 0x84, 0x0c, 0xb8, 0x44,
	0x7c, 0x3d, 0xfd, 0x5c, 0x83, 0xe2, 0x83, 0x43, 0x1c, 0x43, 0x42, 0x83, 0xe3, 0xfd, 0xdd, 0xdc,
	0x7c, 0x3c, 0xfd, 0x5c, 0x05, 0x18, 0xa4, 0xc4, 0xba, 0xe6, 0x2a, 0x08, 0x21, 0x29, 0xf5, 0x4f,
	0x4b, 0xcb, 0xc9, 0xcc, 0x4b, 0x15, 0xd2, 0xe2, 0x12, 0x44, 0xd1, 0xe1, 0xe9, 0xe2, 0xe3, 0x2a,
	0xc0, 0x28, 0x25, 0xdc, 0x35, 0x57, 0x81, 0x1f, 0x49, 0x39, 0xc8, 0x36, 0x0c, 0xb5, 0x4e, 0xa1,
	0xc1, 0x91, 0x02, 0x4c, 0x18, 0x6a, 0x9d, 0x4a, 0x8b, 0x2b, 0xa5, 0x84, 0x3b, 0x16, 0xcb, 0x31,
	0xec, 0x5a, 0x22, 0x87, 0xec, 0x3c, 0x27, 0x89, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63,
	0x7c, 0xf0, 0x48, 0x8e, 0xf1, 0xc0, 0x63, 0x39, 0xc6, 0x13, 0x8f, 0xe5, 0x18, 0xa3, 0x98, 0xca,
	0x0c, 0x93, 0xd8, 0xc0, 0x51, 0x66, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x44, 0x4e, 0xbd, 0x6e,
	0x0f, 0x02, 0x00, 0x00,
}

func (m *Miner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Miner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMiner(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMiner(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMiner(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMiner(dAtA, i, uint64(m.Status))
	}
	if m.CpuIdle != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMiner(dAtA, i, uint64(m.CpuIdle))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMiner(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Miner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMiner(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovMiner(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMiner(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMiner(uint64(m.Status))
	}
	if m.CpuIdle != 0 {
		n += 1 + sovMiner(uint64(m.CpuIdle))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMiner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMiner(x uint64) (n int) {
	return sovMiner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Miner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Miner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Miner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiner
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiner
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= MinerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuIdle", wireType)
			}
			m.CpuIdle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuIdle |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMiner
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMiner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMiner
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMiner
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMiner
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMiner(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMiner
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMiner = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiner   = fmt.Errorf("proto: integer overflow")
)
