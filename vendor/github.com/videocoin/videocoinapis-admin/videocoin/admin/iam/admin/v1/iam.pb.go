// Code generated by protoc-gen-go. DO NOT EDIT.
// source: videocoin/admin/iam/admin/v1/iam.proto

/*
Package v1 is a generated protocol buffer package.

It is generated from these files:
	videocoin/admin/iam/admin/v1/iam.proto

It has these top-level messages:
	ServiceAccount
	ListServiceAccountsRequest
	ListServiceAccountsResponse
	GetServiceAccountRequest
	CreateServiceAccountRequest
	DeleteServiceAccountRequest
	ServiceAccountKey
	ListServiceAccountKeysRequest
	ListServiceAccountKeysResponse
	GetServiceAccountKeyRequest
	CreateServiceAccountKeyRequest
	DeleteServiceAccountKeyRequest
*/
package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Supported key algorithms.
type ServiceAccountKeyAlgorithm int32

const (
	// An unspecified key algorithm.
	ServiceAccountKeyAlgorithm_KEY_ALG_UNSPECIFIED ServiceAccountKeyAlgorithm = 0
	// 1k RSA Key.
	ServiceAccountKeyAlgorithm_KEY_ALG_RSA_1024 ServiceAccountKeyAlgorithm = 1
	// 2k RSA Key.
	ServiceAccountKeyAlgorithm_KEY_ALG_RSA_2048 ServiceAccountKeyAlgorithm = 2
)

var ServiceAccountKeyAlgorithm_name = map[int32]string{
	0: "KEY_ALG_UNSPECIFIED",
	1: "KEY_ALG_RSA_1024",
	2: "KEY_ALG_RSA_2048",
}
var ServiceAccountKeyAlgorithm_value = map[string]int32{
	"KEY_ALG_UNSPECIFIED": 0,
	"KEY_ALG_RSA_1024":    1,
	"KEY_ALG_RSA_2048":    2,
}

func (x ServiceAccountKeyAlgorithm) String() string {
	return proto.EnumName(ServiceAccountKeyAlgorithm_name, int32(x))
}
func (ServiceAccountKeyAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Supported private key output formats.
type ServiceAccountPrivateKeyType int32

const (
	// Unspecified. Equivalent to `TYPE_VIDEOCOIN_CREDENTIALS_FILE`.
	ServiceAccountPrivateKeyType_TYPE_UNSPECIFIED ServiceAccountPrivateKeyType = 0
	// VideoCoin Credentials File format.
	ServiceAccountPrivateKeyType_TYPE_VIDEOCOIN_CREDENTIALS_FILE ServiceAccountPrivateKeyType = 1
)

var ServiceAccountPrivateKeyType_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_VIDEOCOIN_CREDENTIALS_FILE",
}
var ServiceAccountPrivateKeyType_value = map[string]int32{
	"TYPE_UNSPECIFIED":                0,
	"TYPE_VIDEOCOIN_CREDENTIALS_FILE": 1,
}

func (x ServiceAccountPrivateKeyType) String() string {
	return proto.EnumName(ServiceAccountPrivateKeyType_name, int32(x))
}
func (ServiceAccountPrivateKeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Supported public key output formats.
type ServiceAccountPublicKeyType int32

const (
	// Unspecified. Returns nothing here.
	ServiceAccountPublicKeyType_TYPE_NONE ServiceAccountPublicKeyType = 0
	// X509 PEM format.
	ServiceAccountPublicKeyType_TYPE_X509_PEM_FILE ServiceAccountPublicKeyType = 1
	// Raw public key.
	ServiceAccountPublicKeyType_TYPE_RAW_PUBLIC_KEY ServiceAccountPublicKeyType = 2
)

var ServiceAccountPublicKeyType_name = map[int32]string{
	0: "TYPE_NONE",
	1: "TYPE_X509_PEM_FILE",
	2: "TYPE_RAW_PUBLIC_KEY",
}
var ServiceAccountPublicKeyType_value = map[string]int32{
	"TYPE_NONE":           0,
	"TYPE_X509_PEM_FILE":  1,
	"TYPE_RAW_PUBLIC_KEY": 2,
}

func (x ServiceAccountPublicKeyType) String() string {
	return proto.EnumName(ServiceAccountPublicKeyType_name, int32(x))
}
func (ServiceAccountPublicKeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// A service account in the Identity and Access Management API.
type ServiceAccount struct {
	// The resource name of the service account in the following format:
	// `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
	//
	// Requests using `-` as a wildcard for the `PROJECT_ID` will infer the
	// project from the `account` and the `ACCOUNT` value can be the `email`
	// address or the `unique_id` of the service account.
	// Note(Ricardo): {ACCOUNT} we only support the email currently!
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// @OutputOnly The id of the project that owns the service account.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	// @OutputOnly The unique and stable id of the service account.
	UniqueId string `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	// @OutputOnly The email address of the service account.
	Email string `protobuf:"bytes,5,opt,name=email" json:"email,omitempty"`
	// Optional. A user-specified name for the service account.
	// Must be less than or equal to 100 UTF-8 bytes.
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
}

func (m *ServiceAccount) Reset()                    { *m = ServiceAccount{} }
func (m *ServiceAccount) String() string            { return proto.CompactTextString(m) }
func (*ServiceAccount) ProtoMessage()               {}
func (*ServiceAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceAccount) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *ServiceAccount) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *ServiceAccount) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ServiceAccount) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

// The service account list request.
type ListServiceAccountsRequest struct {
	// Required. The resource name of the user associated with the service
	// accounts, such as `projects/my-project-123`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional limit on the number of service accounts to include in the
	// response. Further accounts can subsequently be obtained by including the
	// [ListServiceAccountsResponse.next_page_token][videocoin.iam.admin.v1.ListServiceAccountsResponse.next_page_token]
	// in a subsequent request.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Optional pagination token returned in an earlier
	// [ListServiceAccountsResponse.next_page_token][videocoin.iam.admin.v1.ListServiceAccountsResponse.next_page_token].
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (m *ListServiceAccountsRequest) Reset()                    { *m = ListServiceAccountsRequest{} }
func (m *ListServiceAccountsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServiceAccountsRequest) ProtoMessage()               {}
func (*ListServiceAccountsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListServiceAccountsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ListServiceAccountsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListServiceAccountsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// The service account list response.
type ListServiceAccountsResponse struct {
	// The list of matching service accounts.
	Accounts []*ServiceAccount `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
	// To retrieve the next page of results, set
	// [ListServiceAccountsRequest.page_token][videocoin.iam.admin.v1.ListServiceAccountsRequest.page_token]
	// to this value.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListServiceAccountsResponse) Reset()                    { *m = ListServiceAccountsResponse{} }
func (m *ListServiceAccountsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListServiceAccountsResponse) ProtoMessage()               {}
func (*ListServiceAccountsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListServiceAccountsResponse) GetAccounts() []*ServiceAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *ListServiceAccountsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The service account get request.
type GetServiceAccountRequest struct {
	// Required. The resource name of the service account in the following format:
	// `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
	// Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
	// the account. The `ACCOUNT` value can be the `email` address or the
	// `unique_id` of the service account.
	// Note(Ricardo): {ACCOUNT} we only support the email currently!
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetServiceAccountRequest) Reset()                    { *m = GetServiceAccountRequest{} }
func (m *GetServiceAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceAccountRequest) ProtoMessage()               {}
func (*GetServiceAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetServiceAccountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The service account create request.
type CreateServiceAccountRequest struct {
	// Required. The resource name of the project associated with the service
	// accounts, such as `projects/my-project-123`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required. The account id that is used to generate the service account
	// email address and a stable unique id. It is unique within a project,
	// must be 6-30 characters long, and match the regular expression
	// `[a-z]([-a-z0-9]*[a-z0-9])` to comply with RFC1035.
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
}

func (m *CreateServiceAccountRequest) Reset()                    { *m = CreateServiceAccountRequest{} }
func (m *CreateServiceAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceAccountRequest) ProtoMessage()               {}
func (*CreateServiceAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateServiceAccountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateServiceAccountRequest) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

// The service account delete request.
type DeleteServiceAccountRequest struct {
	// Required. The resource name of the service account in the following
	// format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. Using `-` as a
	// wildcard for the `PROJECT_ID` will infer the project from the account.
	// The `ACCOUNT` value can be the `email` address or the `unique_id` of the
	// service account.
	// Note(Ricardo): {ACCOUNT} we only support the email currently!
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteServiceAccountRequest) Reset()                    { *m = DeleteServiceAccountRequest{} }
func (m *DeleteServiceAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceAccountRequest) ProtoMessage()               {}
func (*DeleteServiceAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteServiceAccountRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ServiceAccountKey struct {
	// The resource name of the service account key in the following format
	// `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
	// Note(Ricardo): {ACCOUNT} we only support the email currently!
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The output format for the private key.
	// Only provided in `CreateServiceAccountKey` responses, not
	// in `GetServiceAccountKey` or `ListServiceAccountKey` responses.
	//
	// VideoCoin retains user-managed private keys.
	PrivateKeyType ServiceAccountPrivateKeyType `protobuf:"varint,2,opt,name=private_key_type,json=privateKeyType,enum=videocoin.admin.iam.admin.v1.ServiceAccountPrivateKeyType" json:"private_key_type,omitempty"`
	// Specifies the algorithm (and possibly key size) for the key.
	KeyAlgorithm ServiceAccountKeyAlgorithm `protobuf:"varint,8,opt,name=key_algorithm,json=keyAlgorithm,enum=videocoin.admin.iam.admin.v1.ServiceAccountKeyAlgorithm" json:"key_algorithm,omitempty"`
	// The private key data. Only provided in `GetServiceAccountKey`
	// responses. Make sure to keep the private key data secure because it
	// allows for the assertion of the service account identity.
	PrivateKeyData []byte `protobuf:"bytes,3,opt,name=private_key_data,json=privateKeyData,proto3" json:"private_key_data,omitempty"`
	// The public key data. Only provided in `GetServiceAccountKey` responses.
	PublicKeyData []byte `protobuf:"bytes,7,opt,name=public_key_data,json=publicKeyData,proto3" json:"public_key_data,omitempty"`
	// The key can be used after this timestamp.
	ValidAfterTime *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=valid_after_time,json=validAfterTime" json:"valid_after_time,omitempty"`
	// The key can be used before this timestamp.
	// For system-managed key pairs, this timestamp is the end time for the
	// private key signing operation. The public key could still be used
	// for verification for a few hours after this time.
	ValidBeforeTime *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=valid_before_time,json=validBeforeTime" json:"valid_before_time,omitempty"`
}

func (m *ServiceAccountKey) Reset()                    { *m = ServiceAccountKey{} }
func (m *ServiceAccountKey) String() string            { return proto.CompactTextString(m) }
func (*ServiceAccountKey) ProtoMessage()               {}
func (*ServiceAccountKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ServiceAccountKey) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceAccountKey) GetPrivateKeyType() ServiceAccountPrivateKeyType {
	if m != nil {
		return m.PrivateKeyType
	}
	return ServiceAccountPrivateKeyType_TYPE_UNSPECIFIED
}

func (m *ServiceAccountKey) GetKeyAlgorithm() ServiceAccountKeyAlgorithm {
	if m != nil {
		return m.KeyAlgorithm
	}
	return ServiceAccountKeyAlgorithm_KEY_ALG_UNSPECIFIED
}

func (m *ServiceAccountKey) GetPrivateKeyData() []byte {
	if m != nil {
		return m.PrivateKeyData
	}
	return nil
}

func (m *ServiceAccountKey) GetPublicKeyData() []byte {
	if m != nil {
		return m.PublicKeyData
	}
	return nil
}

func (m *ServiceAccountKey) GetValidAfterTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ValidAfterTime
	}
	return nil
}

func (m *ServiceAccountKey) GetValidBeforeTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ValidBeforeTime
	}
	return nil
}

// The service account keys list request.
type ListServiceAccountKeysRequest struct {
	// Required. The resource name of the service account in the following
	// format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`.
	//
	// Using `-` as a wildcard for the `PROJECT_ID`, will infer the project from
	// the account. The `ACCOUNT` value can be the `email` address or the
	// `unique_id` of the service account.
	// Note(Ricardo): {ACCOUNT} we only support the email currently!
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ListServiceAccountKeysRequest) Reset()                    { *m = ListServiceAccountKeysRequest{} }
func (m *ListServiceAccountKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*ListServiceAccountKeysRequest) ProtoMessage()               {}
func (*ListServiceAccountKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListServiceAccountKeysRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The service account keys list response.
type ListServiceAccountKeysResponse struct {
	// The public keys for the service account.
	Keys []*ServiceAccountKey `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *ListServiceAccountKeysResponse) Reset()                    { *m = ListServiceAccountKeysResponse{} }
func (m *ListServiceAccountKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*ListServiceAccountKeysResponse) ProtoMessage()               {}
func (*ListServiceAccountKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListServiceAccountKeysResponse) GetKeys() []*ServiceAccountKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

// The service account key get by id request.
type GetServiceAccountKeyRequest struct {
	// Required. The resource name of the service account key in the following
	// format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
	//
	// Using `-` as a wildcard for the `PROJECT_ID` will infer the project from
	// the account. The `ACCOUNT` value can be the `email` address or the
	// `unique_id` of the service account.
	// Note(Ricardo): {ACCOUNT} we only support the email currently!
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetServiceAccountKeyRequest) Reset()                    { *m = GetServiceAccountKeyRequest{} }
func (m *GetServiceAccountKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceAccountKeyRequest) ProtoMessage()               {}
func (*GetServiceAccountKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetServiceAccountKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The service account key create request.
type CreateServiceAccountKeyRequest struct {
	// Required. The resource name of the service account in the following
	// format: `project/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. Using `-` as a
	// wildcard for the `PROJECT_ID` will infer the project from the account.
	// The `ACCOUNT` value can be the `email` address or the `unique_id` of the
	// service account.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateServiceAccountKeyRequest) Reset()                    { *m = CreateServiceAccountKeyRequest{} }
func (m *CreateServiceAccountKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServiceAccountKeyRequest) ProtoMessage()               {}
func (*CreateServiceAccountKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateServiceAccountKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The service account key delete request.
type DeleteServiceAccountKeyRequest struct {
	// Required. The resource name of the service account key in the following
	// format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}`.
	// Using
	// `-` as a wildcard for the `PROJECT_ID` will infer the project from the
	// account. The `ACCOUNT` value can be the `email` address or the
	// `unique_id` of the service account.
	// Note(Ricardo): {ACCOUNT} we only support the email currently!
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteServiceAccountKeyRequest) Reset()                    { *m = DeleteServiceAccountKeyRequest{} }
func (m *DeleteServiceAccountKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServiceAccountKeyRequest) ProtoMessage()               {}
func (*DeleteServiceAccountKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteServiceAccountKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceAccount)(nil), "videocoin.admin.iam.admin.v1.ServiceAccount")
	proto.RegisterType((*ListServiceAccountsRequest)(nil), "videocoin.admin.iam.admin.v1.ListServiceAccountsRequest")
	proto.RegisterType((*ListServiceAccountsResponse)(nil), "videocoin.admin.iam.admin.v1.ListServiceAccountsResponse")
	proto.RegisterType((*GetServiceAccountRequest)(nil), "videocoin.admin.iam.admin.v1.GetServiceAccountRequest")
	proto.RegisterType((*CreateServiceAccountRequest)(nil), "videocoin.admin.iam.admin.v1.CreateServiceAccountRequest")
	proto.RegisterType((*DeleteServiceAccountRequest)(nil), "videocoin.admin.iam.admin.v1.DeleteServiceAccountRequest")
	proto.RegisterType((*ServiceAccountKey)(nil), "videocoin.admin.iam.admin.v1.ServiceAccountKey")
	proto.RegisterType((*ListServiceAccountKeysRequest)(nil), "videocoin.admin.iam.admin.v1.ListServiceAccountKeysRequest")
	proto.RegisterType((*ListServiceAccountKeysResponse)(nil), "videocoin.admin.iam.admin.v1.ListServiceAccountKeysResponse")
	proto.RegisterType((*GetServiceAccountKeyRequest)(nil), "videocoin.admin.iam.admin.v1.GetServiceAccountKeyRequest")
	proto.RegisterType((*CreateServiceAccountKeyRequest)(nil), "videocoin.admin.iam.admin.v1.CreateServiceAccountKeyRequest")
	proto.RegisterType((*DeleteServiceAccountKeyRequest)(nil), "videocoin.admin.iam.admin.v1.DeleteServiceAccountKeyRequest")
	proto.RegisterEnum("videocoin.admin.iam.admin.v1.ServiceAccountKeyAlgorithm", ServiceAccountKeyAlgorithm_name, ServiceAccountKeyAlgorithm_value)
	proto.RegisterEnum("videocoin.admin.iam.admin.v1.ServiceAccountPrivateKeyType", ServiceAccountPrivateKeyType_name, ServiceAccountPrivateKeyType_value)
	proto.RegisterEnum("videocoin.admin.iam.admin.v1.ServiceAccountPublicKeyType", ServiceAccountPublicKeyType_name, ServiceAccountPublicKeyType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IAM service

type IAMClient interface {
	// Lists [ServiceAccounts][videocoin.iam.admin.v1.ServiceAccount] for a
	// project.
	ListServiceAccounts(ctx context.Context, in *ListServiceAccountsRequest, opts ...grpc.CallOption) (*ListServiceAccountsResponse, error)
	// Gets a [ServiceAccount][videocoin.iam.admin.v1.ServiceAccount].
	GetServiceAccount(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error)
	// Creates a [ServiceAccount][videocoin.iam.admin.v1.ServiceAccount]
	CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error)
	// Deletes a [ServiceAccount][videocoin.iam.admin.v1.ServiceAccount].
	DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Lists [ServiceAccountKeys][videocoin.iam.admin.v1.ServiceAccountKey].
	ListServiceAccountKeys(ctx context.Context, in *ListServiceAccountKeysRequest, opts ...grpc.CallOption) (*ListServiceAccountKeysResponse, error)
	// Gets the [ServiceAccountKey][videocoin.iam.admin.v1.ServiceAccountKey]
	// by key id.
	GetServiceAccountKey(ctx context.Context, in *GetServiceAccountKeyRequest, opts ...grpc.CallOption) (*ServiceAccountKey, error)
	// Creates a [ServiceAccountKey][videocoin.iam.admin.v1.ServiceAccountKey]
	// and returns it.
	CreateServiceAccountKey(ctx context.Context, in *CreateServiceAccountKeyRequest, opts ...grpc.CallOption) (*ServiceAccountKey, error)
	// Deletes a [ServiceAccountKey][videocoin.iam.admin.v1.ServiceAccountKey].
	DeleteServiceAccountKey(ctx context.Context, in *DeleteServiceAccountKeyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type iAMClient struct {
	cc *grpc.ClientConn
}

func NewIAMClient(cc *grpc.ClientConn) IAMClient {
	return &iAMClient{cc}
}

func (c *iAMClient) ListServiceAccounts(ctx context.Context, in *ListServiceAccountsRequest, opts ...grpc.CallOption) (*ListServiceAccountsResponse, error) {
	out := new(ListServiceAccountsResponse)
	err := grpc.Invoke(ctx, "/videocoin.admin.iam.admin.v1.IAM/ListServiceAccounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) GetServiceAccount(ctx context.Context, in *GetServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error) {
	out := new(ServiceAccount)
	err := grpc.Invoke(ctx, "/videocoin.admin.iam.admin.v1.IAM/GetServiceAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) CreateServiceAccount(ctx context.Context, in *CreateServiceAccountRequest, opts ...grpc.CallOption) (*ServiceAccount, error) {
	out := new(ServiceAccount)
	err := grpc.Invoke(ctx, "/videocoin.admin.iam.admin.v1.IAM/CreateServiceAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) DeleteServiceAccount(ctx context.Context, in *DeleteServiceAccountRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/videocoin.admin.iam.admin.v1.IAM/DeleteServiceAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) ListServiceAccountKeys(ctx context.Context, in *ListServiceAccountKeysRequest, opts ...grpc.CallOption) (*ListServiceAccountKeysResponse, error) {
	out := new(ListServiceAccountKeysResponse)
	err := grpc.Invoke(ctx, "/videocoin.admin.iam.admin.v1.IAM/ListServiceAccountKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) GetServiceAccountKey(ctx context.Context, in *GetServiceAccountKeyRequest, opts ...grpc.CallOption) (*ServiceAccountKey, error) {
	out := new(ServiceAccountKey)
	err := grpc.Invoke(ctx, "/videocoin.admin.iam.admin.v1.IAM/GetServiceAccountKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) CreateServiceAccountKey(ctx context.Context, in *CreateServiceAccountKeyRequest, opts ...grpc.CallOption) (*ServiceAccountKey, error) {
	out := new(ServiceAccountKey)
	err := grpc.Invoke(ctx, "/videocoin.admin.iam.admin.v1.IAM/CreateServiceAccountKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) DeleteServiceAccountKey(ctx context.Context, in *DeleteServiceAccountKeyRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/videocoin.admin.iam.admin.v1.IAM/DeleteServiceAccountKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IAM service

type IAMServer interface {
	// Lists [ServiceAccounts][videocoin.iam.admin.v1.ServiceAccount] for a
	// project.
	ListServiceAccounts(context.Context, *ListServiceAccountsRequest) (*ListServiceAccountsResponse, error)
	// Gets a [ServiceAccount][videocoin.iam.admin.v1.ServiceAccount].
	GetServiceAccount(context.Context, *GetServiceAccountRequest) (*ServiceAccount, error)
	// Creates a [ServiceAccount][videocoin.iam.admin.v1.ServiceAccount]
	CreateServiceAccount(context.Context, *CreateServiceAccountRequest) (*ServiceAccount, error)
	// Deletes a [ServiceAccount][videocoin.iam.admin.v1.ServiceAccount].
	DeleteServiceAccount(context.Context, *DeleteServiceAccountRequest) (*google_protobuf1.Empty, error)
	// Lists [ServiceAccountKeys][videocoin.iam.admin.v1.ServiceAccountKey].
	ListServiceAccountKeys(context.Context, *ListServiceAccountKeysRequest) (*ListServiceAccountKeysResponse, error)
	// Gets the [ServiceAccountKey][videocoin.iam.admin.v1.ServiceAccountKey]
	// by key id.
	GetServiceAccountKey(context.Context, *GetServiceAccountKeyRequest) (*ServiceAccountKey, error)
	// Creates a [ServiceAccountKey][videocoin.iam.admin.v1.ServiceAccountKey]
	// and returns it.
	CreateServiceAccountKey(context.Context, *CreateServiceAccountKeyRequest) (*ServiceAccountKey, error)
	// Deletes a [ServiceAccountKey][videocoin.iam.admin.v1.ServiceAccountKey].
	DeleteServiceAccountKey(context.Context, *DeleteServiceAccountKeyRequest) (*google_protobuf1.Empty, error)
}

func RegisterIAMServer(s *grpc.Server, srv IAMServer) {
	s.RegisterService(&_IAM_serviceDesc, srv)
}

func _IAM_ListServiceAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).ListServiceAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocoin.admin.iam.admin.v1.IAM/ListServiceAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).ListServiceAccounts(ctx, req.(*ListServiceAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_GetServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocoin.admin.iam.admin.v1.IAM/GetServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetServiceAccount(ctx, req.(*GetServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_CreateServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).CreateServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocoin.admin.iam.admin.v1.IAM/CreateServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).CreateServiceAccount(ctx, req.(*CreateServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_DeleteServiceAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).DeleteServiceAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocoin.admin.iam.admin.v1.IAM/DeleteServiceAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).DeleteServiceAccount(ctx, req.(*DeleteServiceAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_ListServiceAccountKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceAccountKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).ListServiceAccountKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocoin.admin.iam.admin.v1.IAM/ListServiceAccountKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).ListServiceAccountKeys(ctx, req.(*ListServiceAccountKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_GetServiceAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetServiceAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocoin.admin.iam.admin.v1.IAM/GetServiceAccountKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetServiceAccountKey(ctx, req.(*GetServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_CreateServiceAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).CreateServiceAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocoin.admin.iam.admin.v1.IAM/CreateServiceAccountKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).CreateServiceAccountKey(ctx, req.(*CreateServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_DeleteServiceAccountKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceAccountKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).DeleteServiceAccountKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/videocoin.admin.iam.admin.v1.IAM/DeleteServiceAccountKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).DeleteServiceAccountKey(ctx, req.(*DeleteServiceAccountKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "videocoin.admin.iam.admin.v1.IAM",
	HandlerType: (*IAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServiceAccounts",
			Handler:    _IAM_ListServiceAccounts_Handler,
		},
		{
			MethodName: "GetServiceAccount",
			Handler:    _IAM_GetServiceAccount_Handler,
		},
		{
			MethodName: "CreateServiceAccount",
			Handler:    _IAM_CreateServiceAccount_Handler,
		},
		{
			MethodName: "DeleteServiceAccount",
			Handler:    _IAM_DeleteServiceAccount_Handler,
		},
		{
			MethodName: "ListServiceAccountKeys",
			Handler:    _IAM_ListServiceAccountKeys_Handler,
		},
		{
			MethodName: "GetServiceAccountKey",
			Handler:    _IAM_GetServiceAccountKey_Handler,
		},
		{
			MethodName: "CreateServiceAccountKey",
			Handler:    _IAM_CreateServiceAccountKey_Handler,
		},
		{
			MethodName: "DeleteServiceAccountKey",
			Handler:    _IAM_DeleteServiceAccountKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videocoin/admin/iam/admin/v1/iam.proto",
}

func init() { proto.RegisterFile("videocoin/admin/iam/admin/v1/iam.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 908 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x15, 0xfd, 0x91, 0x4a, 0xe3, 0x8f, 0xd0, 0x1b, 0xc1, 0x16, 0x28, 0xc7, 0x49, 0x59, 0x20,
	0x30, 0x8c, 0x82, 0xb2, 0x15, 0xb7, 0x48, 0xda, 0x5c, 0x64, 0x89, 0x4e, 0x09, 0x29, 0xb2, 0x40,
	0x29, 0x6d, 0x5d, 0x20, 0x20, 0xd6, 0xe2, 0x58, 0x65, 0x25, 0x8a, 0xb4, 0x44, 0x09, 0x65, 0x7a,
	0x2a, 0xd0, 0x53, 0x51, 0xa0, 0xa7, 0x1e, 0x7a, 0xec, 0xff, 0xe9, 0x8f, 0x2a, 0x76, 0x49, 0xb9,
	0xfa, 0xa0, 0xa8, 0x32, 0xbd, 0x71, 0xdf, 0xcc, 0x9b, 0x7d, 0xcb, 0x9d, 0x37, 0x24, 0x3c, 0x1b,
	0x5b, 0x26, 0x3a, 0x6d, 0xc7, 0xea, 0x17, 0xa8, 0x69, 0x5b, 0xfd, 0x82, 0x45, 0xed, 0xf0, 0x69,
	0x7c, 0xc6, 0x16, 0x8a, 0x3b, 0x70, 0x3c, 0x87, 0x1c, 0xde, 0xe7, 0x29, 0x3c, 0xaa, 0xb0, 0x50,
	0xf0, 0x34, 0x3e, 0x93, 0x9e, 0x74, 0x1c, 0xa7, 0xd3, 0xc3, 0x02, 0xcf, 0xbd, 0x19, 0xdd, 0x16,
	0x3c, 0xcb, 0xc6, 0xa1, 0x47, 0x6d, 0x37, 0xa0, 0x4b, 0xf9, 0xf9, 0x04, 0xb4, 0x5d, 0xcf, 0x0f,
	0x82, 0xf2, 0x9f, 0x02, 0xec, 0x36, 0x71, 0x30, 0xb6, 0xda, 0x58, 0x6a, 0xb7, 0x9d, 0x51, 0xdf,
	0x23, 0x04, 0x36, 0xfa, 0xd4, 0xc6, 0x9c, 0xf0, 0x54, 0x38, 0xce, 0xe8, 0xfc, 0x99, 0x3c, 0x06,
	0x70, 0x07, 0xce, 0x0f, 0xd8, 0xf6, 0x0c, 0xcb, 0xcc, 0xad, 0xf1, 0x48, 0x26, 0x44, 0x34, 0x93,
	0xe4, 0x21, 0x33, 0xea, 0x5b, 0x77, 0x23, 0x64, 0xd1, 0x0d, 0x1e, 0x4d, 0x07, 0x80, 0x66, 0x92,
	0x2c, 0x6c, 0xa2, 0x4d, 0xad, 0x5e, 0x6e, 0x93, 0x07, 0x82, 0x05, 0xf9, 0x18, 0xb6, 0x4d, 0x6b,
	0xe8, 0xf6, 0xa8, 0x6f, 0xf0, 0xdd, 0x1e, 0xf0, 0xe0, 0x56, 0x88, 0xd5, 0xa9, 0x8d, 0x72, 0x0f,
	0xa4, 0x9a, 0x35, 0xf4, 0x66, 0xe5, 0x0d, 0x75, 0xbc, 0x1b, 0xe1, 0x30, 0x5a, 0x66, 0x1e, 0x32,
	0x2e, 0xed, 0xa0, 0x31, 0xb4, 0xde, 0x23, 0x57, 0xb9, 0xa9, 0xa7, 0x19, 0xd0, 0xb4, 0xde, 0x07,
	0x67, 0x60, 0x41, 0xcf, 0xe9, 0x62, 0x3f, 0xb7, 0x1e, 0x9e, 0x81, 0x76, 0xb0, 0xc5, 0x00, 0xf9,
	0x77, 0x01, 0xf2, 0x91, 0xdb, 0x0d, 0x5d, 0xa7, 0x3f, 0x44, 0xf2, 0x15, 0xa4, 0x69, 0x88, 0xe5,
	0x84, 0xa7, 0xeb, 0xc7, 0x5b, 0xc5, 0x4f, 0x95, 0xb8, 0x8b, 0x51, 0x66, 0x0b, 0xe9, 0xf7, 0x6c,
	0xf2, 0x0c, 0x1e, 0xf6, 0xf1, 0x47, 0xcf, 0x98, 0x52, 0x13, 0xbc, 0xd1, 0x1d, 0x06, 0x37, 0xee,
	0x15, 0x29, 0x90, 0x7b, 0x8d, 0x73, 0x7a, 0x62, 0x4e, 0x2f, 0x37, 0x20, 0x5f, 0x1e, 0x20, 0xf5,
	0xf0, 0x3f, 0x53, 0xd8, 0x3b, 0x09, 0x65, 0x4d, 0xdd, 0x6b, 0x88, 0x68, 0xa6, 0x7c, 0x06, 0xf9,
	0x0a, 0xf6, 0x30, 0x41, 0x45, 0xf9, 0xef, 0x75, 0xd8, 0x9b, 0xcd, 0xae, 0xa2, 0x1f, 0xb9, 0xb7,
	0x09, 0xa2, 0x3b, 0xb0, 0xc6, 0xd4, 0x43, 0xa3, 0x8b, 0xbe, 0xe1, 0xf9, 0x6e, 0x70, 0x67, 0xbb,
	0xc5, 0x2f, 0x92, 0xbc, 0xd8, 0x46, 0x50, 0xa3, 0x8a, 0x7e, 0xcb, 0x77, 0x51, 0xdf, 0x75, 0x67,
	0xd6, 0xe4, 0x1d, 0xec, 0xb0, 0xea, 0xb4, 0xd7, 0x71, 0x06, 0x96, 0xf7, 0xbd, 0x9d, 0x4b, 0xf3,
	0x2d, 0x5e, 0x24, 0xd9, 0xa2, 0x8a, 0x7e, 0x69, 0xc2, 0xd7, 0xb7, 0xbb, 0x53, 0x2b, 0x72, 0x3c,
	0x7b, 0x08, 0x93, 0x7a, 0x94, 0xb7, 0xd6, 0xf6, 0xb4, 0x90, 0x0a, 0xf5, 0x28, 0xbb, 0x75, 0x77,
	0x74, 0xd3, 0xb3, 0xda, 0xff, 0x26, 0x7e, 0xc4, 0x13, 0x77, 0x02, 0x78, 0x92, 0x57, 0x01, 0x71,
	0x4c, 0x7b, 0x96, 0x69, 0xd0, 0x5b, 0x0f, 0x07, 0x06, 0x73, 0x33, 0xb7, 0xd4, 0x56, 0x51, 0x52,
	0x02, 0x27, 0x2b, 0x13, 0x27, 0x2b, 0xad, 0x89, 0xd5, 0xf5, 0x5d, 0xce, 0x29, 0x31, 0x0a, 0x03,
	0xc9, 0x25, 0xec, 0x05, 0x55, 0x6e, 0xf0, 0xd6, 0x19, 0x60, 0x50, 0x66, 0x73, 0x65, 0x99, 0x87,
	0x9c, 0x74, 0xc1, 0x39, 0x0c, 0x95, 0x9f, 0xc3, 0xe3, 0x45, 0x53, 0x54, 0xd1, 0x8f, 0xb3, 0xa1,
	0x8c, 0x70, 0xb4, 0x8c, 0x14, 0x9a, 0xa9, 0x0c, 0x1b, 0x5d, 0xf4, 0x27, 0x46, 0x2a, 0x24, 0xbc,
	0x0c, 0x9d, 0x93, 0x59, 0x77, 0x2e, 0xf8, 0x83, 0x45, 0x63, 0x94, 0x9d, 0xc3, 0x51, 0x94, 0x45,
	0x56, 0xb3, 0xa2, 0x6c, 0x10, 0xcf, 0x3a, 0xa1, 0x20, 0x2d, 0x6f, 0x23, 0x72, 0x00, 0x8f, 0xaa,
	0xea, 0xb5, 0x51, 0xaa, 0xbd, 0x36, 0xde, 0xd6, 0x9b, 0x0d, 0xb5, 0xac, 0x5d, 0x6a, 0x6a, 0x45,
	0x4c, 0x91, 0x2c, 0x88, 0x93, 0x80, 0xde, 0x2c, 0x19, 0x67, 0xa7, 0xc5, 0x73, 0x51, 0x98, 0x47,
	0x8b, 0xa7, 0xe7, 0x2f, 0xc4, 0xb5, 0x93, 0x6b, 0x38, 0x8c, 0x33, 0x03, 0x63, 0xb5, 0xae, 0x1b,
	0xea, 0xdc, 0x0e, 0x9f, 0xc0, 0x13, 0x8e, 0x7e, 0xad, 0x55, 0xd4, 0xab, 0xf2, 0x95, 0x56, 0x37,
	0xca, 0xba, 0x5a, 0x51, 0xeb, 0x2d, 0xad, 0x54, 0x6b, 0x1a, 0x97, 0x5a, 0x4d, 0x15, 0x85, 0x93,
	0x77, 0x90, 0x9f, 0x2b, 0x3d, 0xe9, 0x52, 0x5e, 0x79, 0x07, 0x32, 0xbc, 0x46, 0xfd, 0xaa, 0xae,
	0x8a, 0x29, 0xb2, 0x0f, 0x84, 0x2f, 0xbf, 0xfd, 0xec, 0xf4, 0xa5, 0xd1, 0x50, 0xdf, 0x84, 0x55,
	0xd8, 0x29, 0x39, 0xae, 0x97, 0xbe, 0x31, 0x1a, 0x6f, 0x2f, 0x6a, 0x5a, 0xd9, 0xa8, 0xaa, 0xd7,
	0xe2, 0x5a, 0xf1, 0xaf, 0x34, 0xac, 0x6b, 0xa5, 0x37, 0xe4, 0x37, 0x01, 0x1e, 0x45, 0x4c, 0x5d,
	0xb2, 0xc2, 0x9f, 0xcb, 0xbf, 0x0b, 0xd2, 0xcb, 0x0f, 0x60, 0x06, 0x5d, 0x29, 0xa7, 0xc8, 0x4f,
	0xb0, 0xb7, 0xd0, 0x52, 0xe4, 0xf3, 0xf8, 0x8a, 0xcb, 0x66, 0xb4, 0x94, 0xe8, 0xfb, 0x20, 0xa7,
	0xc8, 0xcf, 0x02, 0x64, 0xa3, 0xba, 0x93, 0xac, 0x38, 0x52, 0xcc, 0xd0, 0x4f, 0xac, 0xa1, 0x0b,
	0xd9, 0xa8, 0x56, 0x5f, 0x25, 0x21, 0xe6, 0x2b, 0x21, 0xed, 0x2f, 0xcc, 0x1b, 0x95, 0xfd, 0x80,
	0xc8, 0x29, 0xf2, 0x87, 0x00, 0xfb, 0xd1, 0x83, 0x82, 0x7c, 0x99, 0xf4, 0x16, 0xa7, 0x66, 0x92,
	0xf4, 0xea, 0xc3, 0xc8, 0xf7, 0x5d, 0xf0, 0x8b, 0x00, 0xd9, 0xa8, 0xc9, 0xb2, 0xea, 0x2d, 0xc4,
	0x4c, 0x23, 0x29, 0xe9, 0x8c, 0x93, 0x53, 0xe4, 0x57, 0x01, 0x0e, 0x96, 0x4c, 0x2b, 0xf2, 0x2a,
	0x79, 0x4b, 0xfc, 0x3f, 0x31, 0x77, 0x70, 0xb0, 0x64, 0x06, 0xae, 0xd2, 0x12, 0x3f, 0x3a, 0x97,
	0xb7, 0xc7, 0xc5, 0xd1, 0x77, 0x87, 0x71, 0x7f, 0xc8, 0x37, 0x0f, 0x38, 0xe3, 0xf9, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x0e, 0x42, 0xde, 0x5e, 0x48, 0x0b, 0x00, 0x00,
}
